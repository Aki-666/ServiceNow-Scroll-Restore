<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_ui_script">
    <sys_ui_script action="INSERT_OR_UPDATE">
        <active>true</active>
        <description/>
        <global>false</global>
        <ignore_in_now_experience>false</ignore_in_now_experience>
        <name>x_424426_scroll.scroll_restore</name>
        <script><![CDATA[var x_424426_scroll = x_424426_scroll || {};
x_424426_scroll.scroll_restore = (function() {
	"use strict";
	
	/* global localStorage */
	/* eslint no-undef: "error" */
	if (x_424426_scroll.scroll_restore) {
		return x_424426_scroll.scroll_restore;
	}
	
	var localStorageKey = 'x_424426_scroll_infos_v2';
	x_424426_scroll.loader.get('window', function ($window) {
		var scrollInfos = {};
		try {
			scrollInfos = JSON.parse(localStorage.getItem(localStorageKey)) || {};
			localStorage.clear('x_424426_scroll_infos'); // clear old key
		} catch (e) {
			localStorage.clear(localStorageKey);
		}
		
		$window.addEventListener('beforeunload', function (event) {
			var scrollElement = $window.document.querySelector('[id$=form_scroll], .sp-scroll');
			if (scrollElement || $window.pageYOffset) {
				// scrollElement is available on Core UI forms and all Service Portal pages
				// pageYOffset is used on Core UI lists
				scrollInfos[$window.location.href] = {
					date: Date.now(),
					pos: scrollElement ? scrollElement.scrollTop : $window.pageYOffset
				};
				
				// to remove the oldest URLs, we transform the object to an array ...
				var savedURLs = Object.entries(scrollInfos).map(function (info) {
					return {
						url: info[0],
						date: info[1].date,
						pos: info[1].pos
					};
				});
				
				// ... sort it by date ...
				savedURLs.sort(function (a, b) { return a.date - b.date; });
				
				// ... and remove the oldest URLs
				if (savedURLs.length > 100) {
					savedURLs.splice(100);
				}
				
				scrollInfos = savedURLs.reduce(function (obj, element) {
					obj[element.url] = { date: element.date, pos: element.pos };
					return obj;
				}, {});
				
				localStorage.setItem(localStorageKey, JSON.stringify(scrollInfos));
			}
		});
		
		if ($window.addAfterPageLoadedEvent) {
			// Core UI provides several event, but scroll position set is only possible after the page loaded
			$window.addAfterPageLoadedEvent(function () {
				restoreScrollPosition();
			});
		} else {
			// Service Portal does not provide any of the Core UI even thandlers
			// instead we have to inject our own "ready" handlers
			var ootbFormWidget = 'fd1f4ec347730200ba13a5554ee490c0';
			var ootbDataTableWidget = '5001b062d7101200b0b044580e6103eb';
			var observer = new $window.MutationObserver(function (mutations) {
				for (var i = 0; i < mutations.length; i++) {
					var mutation = mutations[i];
					if (mutation.addedNodes) {
						for (var j = 0; j < mutation.addedNodes.length; j++) {
							var node = mutation.addedNodes[j];
							if (node.classList && !node.classList.contains('scroll-injected')) {
								if (node.classList.contains('v' + ootbDataTableWidget)) {
									// when ready, the widget-data-table changes the 'loadingData' attribute
									// of the widget's client controller
									node.classList.add('scroll-injected');
									var listElement = $window.angular.element(node);
									var listScope = listElement.scope();
									var loadingDataUnsubscribe = listScope.$watch('loadingData', function (newValue) {
										if (newValue == false) {
											loadingDataUnsubscribe();
											listElement.injector().get('$timeout')(restoreScrollPosition);
										}
									});
								} else if (node.classList.contains('v' + ootbFormWidget)) {
									// when ready, the widget-form emits the 'spModel.gForm.rendered' event
									node.classList.add('scroll-injected');
									var $rootScope = $window.angular.element(node).injector().get('$rootScope');
									var formRenderedUnsubscribe = $rootScope.$on('spModel.gForm.rendered', function () {
										formRenderedUnsubscribe();
										restoreScrollPosition();
									});
								}
							}
						}
					}
				}   
			});

			observer.observe($window.document, {
				childList: true,
				subtree: true
			});
		}
		
		function restoreScrollPosition() {
			var scrollInfo = scrollInfos[$window.location.href];		
			if (scrollInfo) {
				var scrollElement = $window.document.querySelector('[id$=form_scroll], .sp-scroll');
				if (scrollElement) {
					scrollElement.scrollTop = scrollInfo.pos;
				} else {
					$window.scrollTo($window.pageXOffset, scrollInfo.pos);
				}
			}
		}
	});

	return {
		type: 'scroll_restore'
	};
})();
]]></script>
        <script_name>scroll_restore</script_name>
        <sys_class_name>sys_ui_script</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2023-06-17 21:13:59</sys_created_on>
        <sys_id>6af450b097eb6510d70ef207f053af2b</sys_id>
        <sys_mod_count>24</sys_mod_count>
        <sys_name>x_424426_scroll.scroll_restore</sys_name>
        <sys_package display_value="Scroll Restore" source="x_424426_scroll">ee5013a097e76510d70ef207f053af5b</sys_package>
        <sys_policy/>
        <sys_scope display_value="Scroll Restore">ee5013a097e76510d70ef207f053af5b</sys_scope>
        <sys_update_name>sys_ui_script_6af450b097eb6510d70ef207f053af2b</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2023-06-22 09:36:36</sys_updated_on>
        <ui_type>10</ui_type>
        <use_scoped_format>true</use_scoped_format>
    </sys_ui_script>
</record_update>
